{{#> layout}}
  {{#*inline "pageContent"}}
    <!-- Breadcrumb Navigation -->
    <div style="color: #1A1A1A; margin-left: 20px; font-size: 17px">
      <a class="link-without-underline" href="/" style="color: #1A1A1A">Головна</a>
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-right" viewBox="0 0 16 16">
        <path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708"/>
      </svg>
      <a class="link-without-underline" href="/tests" style="color: #1A1A1A">Тести</a>
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-right" viewBox="0 0 16 16">
        <path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708"/>
      </svg>
      <a class="link-without-underline" href="/tests/themes" style="color: #1A1A1A">Тести за темами</a>
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chevron-right" viewBox="0 0 16 16">
        <path fill-rule="evenodd" d="M4.646 1.646a.5.5 0 0 1 .708 0l6 6a.5.5 0 0 1 0 .708l-6 6a.5.5 0 0 1-.708-.708L10.293 8 4.646 2.354a.5.5 0 0 1 0-.708"/>
      </svg>
      <span style="color: green; font-weight: bold;">Тест за темою {{theme_name}}</span>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>
    <link href="/css/test.css" rel="stylesheet">

    <!-- Test Title -->
    <h2>Тест за темою {{theme_name}}</h2>

    <!-- Pagination -->
    <div class="pagination">
    {{#each test.items as |item index|}}
      {{#if (eq (mod index 20) 0)}}
        <div class="pagination-row">
      {{/if}}
        <button
          class="pagination-button
            {{#if (eq ../currentQuestionIndex index )}}current
            {{else}}{{#if (eq item.user_answer item.question.q_correct_answer)}}correct
            {{else}}{{#if (and (neq item.user_answer null) (neq item.user_answer item.question.q_correct_answer))}}incorrect{{/if}}{{/if}}{{/if}}"
          onclick="navigateToQuestion({{../theme_id}}, {{../test.test_id}}, {{index}})">
          <span class="pagination-text">{{add index 1}}</span>
        </button>
      {{#if (eq (mod (add index 1) 25) 0)}}
        </div>
      {{/if}}
    {{/each}}
    {{#if (neq (mod test.items.length 25) 0)}}
      </div>
    {{/if}}
    </div>

    <!-- Question Block -->
    <div class="question-block">
      <div class="question-content">
        <h6>{{add 1 currentQuestionIndex}} запитання</h6>
        <h5>{{currentQuestion.question.q_content}}</h5>
      </div>
      {{#if currentQuestion.question.q_image}}
        <div class="question-image">
          <img src="data:image/png;base64,{{hexToBase64 currentQuestion.question.q_image}}" alt="Question Image">
        </div>
      {{/if}}
      <div class="question-answers">
        {{#if currentQuestion.question.q_answer1}}
          <button class="answer-button" data-answer="1">{{currentQuestion.question.q_answer1}}</button>
        {{/if}}
        {{#if currentQuestion.question.q_answer2}}
          <button class="answer-button" data-answer="2">{{currentQuestion.question.q_answer2}}</button>
        {{/if}}
        {{#if currentQuestion.question.q_answer3}}
          <button class="answer-button" data-answer="3">{{currentQuestion.question.q_answer3}}</button>
        {{/if}}
        {{#if currentQuestion.question.q_answer4}}
          <button class="answer-button" data-answer="4">{{currentQuestion.question.q_answer4}}</button>
        {{/if}}
        {{#if currentQuestion.question.q_answer5}}
          <button class="answer-button" data-answer="5">{{currentQuestion.question.q_answer5}}</button>
        {{/if}}

        <!-- End Test Button -->
        <button class="btn btn-success end-test-button" {{#if test.is_done}} onclick="endTest({{test.test_id}}, 'Результати', false, this)">
          Показати результати {{else}} onclick="endTest({{test.test_id}}, 'Тест завершено!', true, this)"> Закінчити тест{{/if}}</button>
      </div>
    </div>

    <!-- End Test Modal -->
    <div id="endTestModal" class="modal">
      <div class="modal-content">
        <span class="close" onclick="closeModal()">&times;</span>
        <h6 id="resultsTitle"></h6>
        <p>Запитань пройдено: <span id="answeredQuestions"></span></p>
        <div class="chartCard">
          <div class="chartBox">
            <canvas id="resultChart"></canvas>
          </div>
        </div>
        <button style="margin-top: 10px" class="btn btn-success" onclick="navigateToNextTheme({{add theme_id 1}})">Наступна тема</button>
      </div>
    </div>

    <!-- Academic Integrity Modal -->
    <div id="integrityModal" class="academic-modal">
      <div class="academic-modal-content">
        <span class="academic-close" onclick="closeIntegrityModal()">&times;</span>
        <h6>Будь ласка, дотримуйтесь академічної доброчесності.</h6>
        <img src="/images/academic.gif" alt="meow" style="width:100%;">
      </div>
    </div>

    <!-- Comments Section -->
    <section class="gradient-custom">
      <div class="container my-5 py-5">
        <div class="row d-flex justify-content-center">
          <div class="col-md-12 col-lg-10 col-xl-8">
            <div class="card">
              <div class="card-body p-4">
                <h4 class="text-center mb-4 pb-2">Коментарі до питання</h4>

                <!-- Comment Input Field -->
                <div class="mb-4">
                  <textarea class="form-control" id="newComment" rows="3" placeholder="Write a comment..."></textarea>
                  <button class="btn btn-primary mt-2" id="postCommentButton">Прокоментувати</button>
                </div>

                <div class="row">
                  <div class="col" id="commentsContainer">
                    <!-- Comments here-->
                    <div id="loading" class="text-center">
                      <img src="/images/avatar7.gif" alt="Loading...">
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </section>

    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const userAnswer = '{{currentQuestion.user_answer}}';
        const correctAnswer = '{{currentQuestion.question.q_correct_answer}}';

        // Highlight the answers based on previous selection
        if (userAnswer) {
          document.querySelectorAll('.answer-button').forEach((btn) => {
            const answer = btn.getAttribute('data-answer');
            if (answer === correctAnswer) {
              btn.classList.add('correct');
            } else if (answer === userAnswer) {
              btn.classList.add('incorrect');
            }
            btn.disabled = true;
          });
        }

        // Add event listeners to answer buttons
        document.querySelectorAll('.answer-button').forEach((button) => {
          if ({{test.is_done}}) {
            button.disabled = true;
            return;
          }

          button.addEventListener('click', async function() {
            const userAnswer = this.getAttribute('data-answer');
            const questionId = '{{currentQuestion.test_question_id}}';
            try {
              const response = await fetch(`/tests/update/questions/${questionId}`, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'X-Requested-With': 'XMLHttpRequest',
                },
                body: JSON.stringify({ user_answer: userAnswer }),
              });

              if (!response.ok) {
                throw new Error('Network response was not ok');
              }

              const result = await response.json();

              // Highlight the buttons based on the correctness of the answer
              document.querySelectorAll('.answer-button').forEach((btn) => {
                const answer = btn.getAttribute('data-answer');
                btn.classList.remove('correct', 'incorrect');
                if (answer == result.correctAnswer) {
                  btn.classList.add('correct');
                } else if (answer == userAnswer) {
                  btn.classList.add('incorrect');
                }
                btn.disabled = true;
              });

              setTimeout(() => {
                const nextQuestionIndex = {{add currentQuestionIndex 1}};
                if(nextQuestionIndex < ({{test.items.length}})) {
                  navigateToQuestion({{theme_id}}, {{test.test_id}}, nextQuestionIndex);
                }
              }, 1200);

            } catch (error) {
              console.error('There was a problem with the fetch operation:', error);
            }
          });
        });
      });

      let isNavigatingWithinTest = false;
      let chartIsCreated = false;

      window.addEventListener('beforeunload', async function(e) {
        if (!isNavigatingWithinTest && !{{test.is_done}} && (!{{test.is_done}} && !chartIsCreated)) {
          var confirmationMessage = 'Ви точно хочете цього? Прогрес не збережетсься';
          e.returnValue = confirmationMessage; // Gecko, Trident, Chrome 34+
          return confirmationMessage; // Gecko, WebKit, Chrome <34
        }
      });

      window.addEventListener('unload', async function() {
        if (!isNavigatingWithinTest) {
          localStorage.clear();
        }
      });

      async function navigateToQuestion(themeId, testId, questionIndex) {
        isNavigatingWithinTest = true;
        window.location.href = `/tests/themes/test?theme_id=${themeId}&test_id=${testId}&question_index=${questionIndex}`;
      }

      async function endTest(testId, title, disabled, button) {
        button.disabled = false;

        try {
          const response = await fetch(`/tests/finish/${testId}`, {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
          });

          if (!response.ok) {
            throw new Error('Network response was not ok');
          }

          const result = await response.json();
          document.getElementById('answeredQuestions').textContent = `${result.answeredQuestions}/${result.answeredQuestions+result.unansweredQuestions}`;
          document.getElementById('resultsTitle').textContent = title;

          if(!chartIsCreated) {
            renderDoughnutChart(result.correctAnswers, result.incorrectAnswers, result.unansweredQuestions);
            chartIsCreated = true;
          }

          document.getElementById('endTestModal').style.display = 'flex';
        } catch (error) {
          console.error('There was a problem with the fetch operation:', error);
        }
      }

      function renderDoughnutChart(correctAnswers, incorrectAnswers, unansweredQuestions) {
        const totalQuestions = correctAnswers + incorrectAnswers + unansweredQuestions;
        const correctPercentage = ((correctAnswers / totalQuestions) * 100).toFixed(2);

        const data = {
          labels: ['Правильні', 'Неправильні', 'Без відповіді'],
          datasets: [{
            data: [correctAnswers, incorrectAnswers, unansweredQuestions],
            backgroundColor: ['#4CAF50', '#F44336', '#9E9E9E'],
          }],
        };


        const doughnutLabel = {
          id: 'doughnutLabel',
          afterDatasetsDraw(chart, args, pluginOptions) {
            const { ctx, data } = chart;
            ctx.save();
            const xCoor = 1000;
            const yCoor = 1000;
            ctx.font = 'bold 30px sans-serif';
            ctx.fillStyle = '#4CAF50';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillText(correctPercentage + '%', xCoor, yCoor);
          },
        };

        // config
        const config = {
          type: 'doughnut',
          data,
          options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
              datalabels: {
                formatter: function(value, context) {
                  return context.chart.data.labels[context.dataIndex] + '\n' + value;
                },
                color: '#fff',
                font: {
                  weight: 'bold',
                },
              },
              tooltip: {
                callbacks: {
                  label: function(tooltipItem) {
                    return '\t\t\t\t\t\t' + tooltipItem.raw;
                  },
                },
              },
              doughnutLabel,
            },
          },
        };

        // render init block
        const ctx = new Chart(
          document.getElementById('resultChart').getContext('2d'),
          config,
        );

      }


      function closeModal() {
        document.getElementById('endTestModal').style.display = 'none';
      }

      async function navigateToNextTheme(nextThemeId) {
        window.location.href = `/tests/themes/test?theme_id=${nextThemeId}`;
      }
      document.addEventListener('visibilitychange', function() {
        if (document.hidden && (!isNavigatingWithinTest && !{{test.is_done}} && (!{{test.is_done}} && !chartIsCreated))) {
          showIntegrityModal();
        }
      });

      function showIntegrityModal() {
        const modal = document.getElementById('integrityModal');
        modal.style.display = 'block';
      }

      function closeIntegrityModal() {
        const modal = document.getElementById('integrityModal');
        modal.style.display = 'none';
      }
    </script>

    <script>
      let replyButtonClicked = false;
      const commentsContainer = document.getElementById('commentsContainer');
      window.onload = async function () {
        const comments = await getInitialComments();

        renderComments(comments, commentsContainer);
        setupPostCommentButton();
        // $('#loading').hide();
      };

      async function getInitialComments() {
        let comments = await fetchComments();
        return comments ? comments : [];
      }

      async function fetchComments() {
        return fetch('/comments/{{theme_id}}/{{currentQuestion.question.q_id}}')
          .then((response) => response.json());
      }

      function renderComments(comments, container) {
        container.innerHTML = '';
        comments.filter((comment) => JSON.parse(JSON.stringify(comment)).parent_comment == null).forEach((comment) => {
          const commentElement = createCommentElement(comment);
          container.appendChild(commentElement);
        });
      }

      function setupPostCommentButton() {
        document.getElementById('postCommentButton').onclick = function () {
          const newCommentText = document.getElementById('newComment').value;
          if (newCommentText.trim() !== '') {
            postComment(newCommentText);
          }
        };
      }

      async function postComment(commentText) {
        try {
          const response = await fetch(
            'http://localhost:19429/comments/createComment',
            {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                comment_text: commentText,
                q_id: {{currentQuestion.question.q_id}},
                theme_id: {{currentQuestion.question.theme_id}},
                user_login: '{{currentUser.user_login}}',
                parent_comment_id: null,
              }),
            },
          );

          if (!response.ok) {
            throw new Error('Network response was not ok');
          }

          const savedComment = await response.json()
          const comments = await getInitialComments();
          document.getElementById('newComment').value = '';
          renderComments(comments, commentsContainer);
        } catch (error) {
          console.error('Failed to post comment:', error);
        }
      }

      function createCommentElement(comment, isReply = false) {
        const div = document.createElement('div');
        div.className = 'd-flex flex-start mt-4';
        div.setAttribute('data-comment-id', comment.comment_id);
        if (isReply) {
          div.className += ' ms-5';
        }

        const avatar = document.createElement('img');
        avatar.className = 'rounded-circle shadow-1-strong me-3';
        avatar.src = `/images/avatar${comment.user.user_photo}.gif`; // Use number to load avatar
        avatar.alt = 'avatar';
        avatar.width = 65;
        avatar.height = 65;

        const content = document.createElement('div');
        content.className = 'flex-grow-1 flex-shrink-1';

        const contentDiv = document.createElement('div');

        const header = document.createElement('div');
        header.className = 'd-flex justify-content-between align-items-center';

        const nameTime = document.createElement('p');
        nameTime.className = 'mb-1';
        nameTime.textContent = `${comment.user.user_login} - ${formatDate(comment.comment_date)}`;

        const replyLink = document.createElement('a');
        if (!isReply) {
          replyLink.href = '#!';
          replyLink.setAttribute('data-username', comment.user.user_login);
          replyLink.innerHTML =
            '<i class="fas fa-reply fa-xs"></i><span class="small"> reply</span>';
          replyLink.onclick = function () {
            if (!replyButtonClicked)
              handleReplyClick(replyLink, contentDiv, content, comment.comment_id);
          };
        }

        const message = document.createElement('p');
        message.className = 'small mb-0';
        message.textContent = comment.comment_text;

        header.appendChild(nameTime);
        if (!isReply) {
          header.appendChild(replyLink);
        }
        contentDiv.appendChild(header);
        contentDiv.appendChild(message);

        div.appendChild(avatar);
        div.appendChild(content);

        // Render replies
        if (comment.replies && comment.replies.length > 0) {
          comment.replies.forEach((reply) => {
            const replyElement = createCommentElement(reply, true);
            contentDiv.appendChild(replyElement);
          });
        }

        content.appendChild(contentDiv);
        return div;
      }

      function handleReplyClick(replyLink, content, parentDiv, comment_id) {
        const replyInput = document.createElement('div');
        replyInput.className = 'reply-input mt-2';
        replyInput.innerHTML = `
    <textarea class="form-control" rows="2" placeholder="Write a reply..."></textarea>
    <button class="btn btn-sm btn-primary mt-2 post-reply-button">Reply</button>
  `;
        content.appendChild(replyInput);
        replyInput.querySelector('.post-reply-button').onclick = function () {
          handlePostReply(replyLink, replyInput, parentDiv, comment_id);
        };
        replyButtonClicked = true;
      }

      async function handlePostReply(replyLink, replyInput, parentDiv, comment_id) {
        const reply = replyInput.querySelector('textarea').value;
        if (reply.trim() !== '') {
          const comments = await getInitialComments();
          const parentCommentId = parseInt(comment_id, 10);
          const parentComment = findCommentById(comments, parentCommentId);
          const replyText = `@${replyLink.getAttribute('data-username')}: ${reply}`; // Mention the user being replied to
          if (parentComment) {

            const newReply = {
              question: { q_id: {{currentQuestion.question.q_id}}, theme_id: {{currentQuestion.question.theme_id}} },
              user: { user_login: '{{currentUser.user_login}}', user_photo: {{currentUser.user_photo}} },
              parent_comment_id: parentCommentId,
              comment_text: replyText,
              comment_date: new Date(),
              replies: [],
            };
            try {
              const response = await fetch(
                'http://localhost:19429/comments/createComment',
                {
                  method: 'POST',
                  headers: {
                    'Content-Type': 'application/json',
                  },
                  body: JSON.stringify({
                    comment_text: replyText,
                    q_id: {{currentQuestion.question.q_id}},
                    theme_id: {{currentQuestion.question.theme_id}},
                    user_login: '{{currentUser.user_login}}',
                    parent_comment_id: parentCommentId,
                  }),
                },
              );

              parentComment.replies.push(newReply);
              renderComments(comments, commentsContainer);
              replyButtonClicked = false;
              replyInput.remove();
            } catch (error) {
              console.error('Failed to reply comment:', error);
            }
          } else {
            console.error(`Parent comment with ID ${parentCommentId} not found`);
          }
        } else {
          replyButtonClicked = false;
          replyInput.remove();
        }
      }

      function findCommentById(comments, id) {
        for (let comment of comments) {
          if (comment.comment_id === id) {
            return comment;
          }
          for (let reply of comment.replies) {
            if (reply.comment_id === id) {
              return reply;
            }
          }
        }
        return null;
      }

      function formatDate(date) {
        function toUTC(date) {
          return new Date(date.getTime() + date.getTimezoneOffset() * 60000);
        }
        date = new Date(date);
        const now = toUTC(new Date());
        const diff = Math.floor((now - date) / 1000);

        if (diff < 60) return `${diff} seconds ago`;
        if (diff < 3600) return `${Math.floor(diff / 60)} minutes ago`;
        if (diff < 86400) return `${Math.floor(diff / 3600)} hours ago`;
        return `${Math.floor(diff / 86400)} days ago`;
      }
    </script>
  {{/inline}}
{{/layout}}